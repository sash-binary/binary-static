{"version":3,"sources":["../../../../src/javascript/landing_pages/binary_grid.js"],"names":["systems","mac","linux","ios","android","windows","fetch","then","response","json","$","attr","app","name","OSDetect","localStorage","getItem","navigator","platform","Object","keys","map","os","some","filter","window","onload","desktop_buttons","document","querySelectorAll","ios_messages","android_buttons","forEach","element","classList","remove","commonOnload"],"mappings":"AAAA,GAAMA,SAAU,CACZC,IAAO,CAAC,QAAD,CAAW,UAAX,CAAuB,QAAvB,CADK,CAEZC,MAAO,CACH,OADG,CAEH,YAFG,CAGH,aAHG,CAIH,sBAJG,CAKH,gBALG,CAMH,cANG,CAOH,kBAPG,CAQH,SARG,CASH,cATG,CAUH,eAVG,CAWH,KAXG,CAFK,CAeZC,IAAK,CACD,QADC,CAED,MAFC,CAGD,MAHC,CAID,kBAJC,CAKD,gBALC,CAMD,gBANC,CAfO,CAuBZC,QAAS,CACL,SADK,CAEL,cAFK,CAEW;AAChB,cAHK,CAIL,IAJK,CAvBG,CA6BZC,QAAS,CACL,OADK,CAEL,OAFK,CAGL,OAHK,CAIL,OAJK,CA7BG,CAAhB,CAoCAC,MAAM,qCAAN,EACKC,IADL,CACU,yBAAYC,UAASC,IAAT,EAAZ,CADV,EAEKF,IAFL,CAEU,aAAO,CACTG,EAAE,WAAF,EAAeC,IAAf,CAAoB,MAApB,oCAA+DC,IAAIC,IAAnE,CACH,CAJL,EAMA,GAAMC,UAAW,QAAXA,SAAW,EAAM,CACnB;AACA;AACA;AACA,GAAIC,aAAaC,OAAb,CAAqB,WAArB,CAAJ,CAAuC,CACnC,MAAOD,cAAaC,OAAb,CAAqB,WAArB,CACV,CAED,GAAI,MAAOC,UAAP,GAAqB,WAArB,EAAoCA,UAAUC,QAAlD,CAA4D,CACxD,MAAOC,QAAOC,IAAP,CAAYpB,OAAZ,EAAqBqB,GAArB,CAAyB,SAACC,EAAD,CAAQ,CACpC,GAAItB,QAAQsB,EAAR,EAAYC,IAAZ,CAAiB,SAACL,QAAD,QAAcD,WAAUC,QAAV,GAAuBA,QAArC,CAAjB,CAAJ,CAAqE,CACjE,MAAOI,GACV,CAED,MAAO,MACV,CANM,EAMJE,MANI,CAMG,SAACF,EAAD,QAAQA,GAAR,CANH,EAMe,CANf,CAOV,CAED,MAAO,YACV,CAnBD,CAqBAG,OAAOC,MAAP,CAAgB,UAAY,CACxB,GAAMJ,IAAKR,UAAX,CACA,GAAMa,iBAAkBC,SAASC,gBAAT,CAA0B,cAA1B,CAAxB,CACA,GAAMC,cAAkBF,SAASC,gBAAT,CAA0B,cAA1B,CAAxB,CACA,GAAME,iBAAkBH,SAASC,gBAAT,CAA0B,iBAA1B,CAAxB,CACA,GAAIP,KAAO,SAAX,CAAsB,CAClB;AACAS,gBAAgBC,OAAhB,CAAwB,wBAAWC,SAAQC,SAAR,CAAkBC,MAAlB,CAAyB,WAAzB,CAAX,CAAxB,CACH,CAHD,IAGO,IAAIb,KAAO,KAAX,CAAkB,CACrB;AACAQ,aAAaE,OAAb,CAAqB,wBAAWC,SAAQC,SAAR,CAAkBC,MAAlB,CAAyB,WAAzB,CAAX,CAArB,CACH,CAHM,IAGA,CACH;AACAJ,gBAAgBC,OAAhB,CAAwB,wBAAWC,SAAQC,SAAR,CAAkBC,MAAlB,CAAyB,WAAzB,CAAX,CAAxB,EACAR,gBAAgBK,OAAhB,CAAwB,wBAAWC,SAAQC,SAAR,CAAkBC,MAAlB,CAAyB,WAAzB,CAAX,CAAxB,CACH,CAEDC,cACH,CAlBD","file":"binary_grid.js","sourcesContent":["const systems = {\n    mac  : ['Mac68K', 'MacIntel', 'MacPPC'],\n    linux: [\n        'HP-UX',\n        'Linux i686',\n        'Linux amd64',\n        'Linux i686 on x86_64',\n        'Linux i686 X11',\n        'Linux x86_64',\n        'Linux x86_64 X11',\n        'FreeBSD',\n        'FreeBSD i386',\n        'FreeBSD amd64',\n        'X11',\n    ],\n    ios: [\n        'iPhone',\n        'iPod',\n        'iPad',\n        'iPhone Simulator',\n        'iPod Simulator',\n        'iPad Simulator',\n    ],\n    android: [\n        'Android',\n        'Linux armv7l', // Samsung galaxy s2 ~ s5, nexus 4/5\n        'Linux armv8l',\n        null,\n    ],\n    windows: [\n        'Win16',\n        'Win32',\n        'Win64',\n        'WinCE',\n    ],\n};\nfetch('https://grid.binary.me/version.json')\n    .then(response => response.json())\n    .then(app => {\n        $('.download').attr('href', `https://grid.binary.me/download/${app.name}`);\n    });\n\nconst OSDetect = () => {\n    // For testing purposes or more compatibility, if we set 'config.os'\n    // inside our localStorage, we ignore fetching information from\n    // navigator object and return what we have straight away.\n    if (localStorage.getItem('config.os')) {\n        return localStorage.getItem('config.os');\n    }\n\n    if (typeof navigator !== 'undefined' && navigator.platform) {\n        return Object.keys(systems).map((os) => {\n            if (systems[os].some((platform) => navigator.platform === platform)) {\n                return os;\n            }\n\n            return false;\n        }).filter((os) => os)[0];\n    }\n\n    return 'Unknown OS';\n};\n\nwindow.onload = function () {\n    const os = OSDetect();\n    const desktop_buttons = document.querySelectorAll('.try-desktop');\n    const ios_messages    = document.querySelectorAll('.ios-message');\n    const android_buttons = document.querySelectorAll('.android-button');\n    if (os === 'android') {\n        // hide desktop\n        android_buttons.forEach(element => element.classList.remove('invisible'));\n    } else if (os === 'ios') {\n        // hide all button\n        ios_messages.forEach(element => element.classList.remove('invisible'));\n    } else {\n        // show both buttons on desktop\n        android_buttons.forEach(element => element.classList.remove('invisible'));\n        desktop_buttons.forEach(element => element.classList.remove('invisible'));\n    }\n\n    commonOnload();\n};\n"]}